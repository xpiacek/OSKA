# ‚úÖ TEST-1-ZAKLADNE.md - FIN√ÅLNA VERZIA 2.0

**ƒåas:** 90 min√∫t | **Ot√°zky:** 60 | **Body:** 1 bod za spr√°vnu odpoveƒè | **Hranica:** 36 bodov (60%)**

> **FLEXIBILN√ù FORM√ÅT:** Ka≈æd√° ot√°zka m√° 0-N spr√°vnych odpoved√≠!

---

## ƒåAS≈§ A: Z√ÅKLADN√â POJMY (10 ot√°zok)

### Q1: PCB - Process Control Block

Obsahom PCB s√∫:

- [ ] A) Pracovn√Ω adres√°r
- [ ] B) V≈°eobecn√© registre CPU
- [ ] C) Cel√Ω z√°sobn√≠k procesu
- [ ] D) Cel√© data procesu

**Spr√°vna odpoveƒè:** A, B

**Vysvetlenie:** PCB obsahuje UKAZOVATEƒΩ na z√°sobn√≠k, nie cel√Ω z√°sobn√≠k! Pracovn√Ω adres√°r a registre s√∫ s√∫ƒças≈• PCB.

---

### Q2: STAVY PROCESU

Ktor√© s√∫ spr√°vne prechody?

- [ ] A) Running ‚Üí Ready
- [ ] B) Blocked ‚Üí Ready
- [ ] C) Running ‚Üí Blocked
- [ ] D) Blocked ‚Üí Running

**Spr√°vna odpoveƒè:** A, B, C

**Vysvetlenie:** Blocked ‚Üí Running MUS√ç √≠s≈• cez Ready! To nie je priamy prechod.

---

### Q3: VL√ÅKNA

Oznaƒçte spr√°vne tvrdenia:

- [ ] A) Ka≈æd√Ω thread m√° vlastn√Ω z√°sobn√≠k
- [ ] B) Thread-y komunikuj√∫ cez spoloƒçn√∫ pam√§≈•
- [ ] C) POSIX thread vytvor√≠me s pthread_create()
- [ ] D) User threads s√∫ r√Ωchlej≈°ie ako kernel threads

**Spr√°vna odpoveƒè:** A, B, C, D

**Vysvetlenie:** V≈°etky s√∫ spr√°vne! A, B, C = fakty. D = User threads s√∫ r√Ωchlej≈°ie lebo sa nevstupuje do jadra.

---

### Q4: SIGN√ÅLY

Ktor√© sign√°ly sa nedaj√∫ zachyti≈•?

- [ ] A) SIGSTOP
- [ ] B) SIGKILL
- [ ] C) SIGTERM
- [ ] D) SIGINT

**Spr√°vna odpoveƒè:** A, B

**Vysvetlenie:** SIGSTOP a SIGKILL s√∫ ≈°peci√°lne - nedaj√∫ sa zachyti≈•, blokovat alebo ignorova≈•.

---

### Q5: SEMAF√ìR

Ktor√© tvrdenia o semaf√≥re s√∫ spr√°vne?

- [ ] A) down() - ak s=0, blokuje proces
- [ ] B) up() - prebud√≠ proces alebo s++
- [ ] C) Poƒçet down() ‚â§ poƒçet up()
- [ ] D) Semaf√≥r je vhodn√Ω na synchroniz√°ciu

**Spr√°vna odpoveƒè:** A, B, C, D

**Vysvetlenie:** V≈°etky s√∫ korektn√© defin√≠cie semaf√≥ru.

---

### Q6: MUTEX

ƒåo je mutex?

- [ ] A) Vz√°jomn√© vyluƒçovanie
- [ ] B) Bin√°rny semaf√≥r
- [ ] C) Chr√°ni≈• kritick√∫ sekciu
- [ ] D) Niƒç z toho

**Spr√°vna odpoveƒè:** A, B, C

**Vysvetlenie:** Mutex = mutual exclusion = bin√°rny semaf√≥r = chr√°ni≈• kritick√∫ sekciu.

---

### Q7: DEADLOCK

Podmienky deadlocku:

- [ ] A) Vz√°jomn√© vyluƒçovanie
- [ ] B) ƒåakanie na prostriedky
- [ ] C) ≈Ωiadne preemption
- [ ] D) Cyklick√© ƒçakanie

**Spr√°vna odpoveƒè:** A, B, C, D

**Vysvetlenie:** V≈°etky 4 podmienky MUSIA by≈• pr√≠tomn√©! Ch√Ωbaj√∫ca aj jedna = ≈æiadny deadlock.

---

### Q8: PRODUCER-CONSUMER

ƒåo je probl√©m?

- [ ] A) Producer produkuje, Consumer konzumuje
- [ ] B) Buffer je limitovan√Ω
- [ ] C) Potrebn√° synchroniz√°cia
- [ ] D) V≈°etko vy≈°≈°ie

**Spr√°vna odpoveƒè:** D

**Vysvetlenie:** V≈°etky vy≈°≈°ie uveden√© s√∫ ƒçasti probl√©mu.

---

### Q9: DINING PHILOSOPHERS

≈†peci√°lnosti:

- [ ] A) 5 filozofov, 5 vidliƒçiek
- [ ] B) Filosof je v stave THINK alebo EAT
- [ ] C) Potrebuj√∫ obe vidliƒçky na jedenie
- [ ] D) Hroz√≠ deadlock

**Spr√°vna odpoveƒè:** A, B, C, D

**Vysvetlenie:** V≈°etko je spr√°vne. Je to klasick√Ω pr√≠klad synchroniz√°cie.

---

### Q10: READERS-WRITERS

Probl√©m:

- [ ] A) Viacer√≠ ƒçitatelia m√¥≈æu ƒç√≠ta≈• naraz
- [ ] B) Pisateƒæ mus√≠ ma≈• exkluz√≠vny pr√≠stup
- [ ] C) ƒåitateƒæ blokuje pisateƒæa
- [ ] D) Niƒç z toho

**Spr√°vna odpoveƒè:** A, B, C

**Vysvetlenie:** V≈°etci ƒçitatelia m√¥≈æu ƒç√≠ta≈•, ale pisateƒæ m√° prioritu.

---

## ƒåAS≈§ B: UNIX PR√çKAZY (15 ot√°zok)

### Q11: FIND - Z√°klady

```bash
find /public -type f -name "*.txt"
```

- [ ] A) N√°jde len s√∫bory (.txt)
- [ ] B) V /public a podadres√°roch
- [ ] C) N√°jde v≈°etko s .txt
- [ ] D) N√°jde adres√°re aj s√∫bory

**Spr√°vna odpoveƒè:** A, B

**Vysvetlenie:** `-type f` = iba s√∫bory! Bez adres√°rov.

---

### Q12: FIND - MTIME

```bash
find . -type f -mtime -7
```

- [ ] A) S√∫bory upraven√© v posledn√Ωch 7 dniach
- [ ] B) Presne pred 7 d≈àami
- [ ] C) Menej ako 7 dn√≠
- [ ] D) Viac ako 7 dn√≠

**Spr√°vna odpoveƒè:** A, C

**Vysvetlenie:** `-mtime -7` = MINUS = menej ako 7 dn√≠ = posledn√Ω t√Ω≈æde≈à!

---

### Q13: GREP - Z√°klady

```bash
grep "pattern" file.txt
```

- [ ] A) N√°jde v≈°etky riadky s "pattern"
- [ ] B) Vyp√≠≈°e riadky obsahuj√∫ce re≈•azec
- [ ] C) Pracuje len s textom
- [ ] D) V≈ædy znaluje v≈°etko

**Spr√°vna odpoveƒè:** A, B

**Vysvetlenie:** grep n√°jde a vyp√≠≈°e v≈°etky riadky s dan√Ωm vzorom.

---

### Q14: GREP - REGEX

```bash
grep -E "^[0-9]" file.txt
```

- [ ] A) Riadky zaƒç√≠naj√∫ce ƒç√≠slicou
- [ ] B) Riadky s ƒç√≠slicami
- [ ] C) Bez -E by nepre≈°lo
- [ ] D) `-E` = extended regex

**Spr√°vna odpoveƒè:** A, C, D

**Vysvetlenie:** ^ = zaƒçiatok, [0-9] = ƒç√≠slica, -E = extended regex (nutn√©!)

---

### Q15: SED - SUBSTIT√öCIA

```bash
sed 's/old/new/g' file.txt
```

- [ ] A) Zmen√≠ prv√Ω v√Ωskyt
- [ ] B) Zmen√≠ v≈°etky v√Ωskyty
- [ ] C) `g` = global (v≈°etci)
- [ ] D) Bez `g` iba prv√Ω

**Spr√°vna odpoveƒè:** B, C, D

**Vysvetlenie:** `g` flag = v≈°etci v√Ωskyty v ka≈ædom riadku!

---

### Q16: AWK - POLE

```bash
awk '{print $1}' file.txt
```

- [ ] A) Prv√Ω stƒ∫pec
- [ ] B) Prv√Ω riadok
- [ ] C) `$1` = prv√© pole
- [ ] D) Podƒæa separator-a

**Spr√°vna odpoveƒè:** A, C, D

**Vysvetlenie:** $1 = prv√Ω stƒ∫pec. Oddeƒæovaƒç je defaultne SPACE.

---

### Q17: WC - POƒå√çTANIE

```bash
wc -l file.txt
```

- [ ] A) Poƒçet riadkov
- [ ] B) Poƒçet slov
- [ ] C) Poƒçet znakov
- [ ] D) `-l` = lines

**Spr√°vna odpoveƒè:** A, D

**Vysvetlenie:** `-l` = lines. `-w` = words, `-c` = characters.

---

### Q18: CUT - STƒπPCE

```bash
cut -d: -f1,3 /etc/passwd
```

- [ ] A) V√Ωber stƒ∫pcov 1 a 3
- [ ] B) Delimiter je `:`
- [ ] C) Vyp√≠≈°e login a uid
- [ ] D) `-f` = fields

**Spr√°vna odpoveƒè:** A, B, C, D

**Vysvetlenie:** V≈°etko je spr√°vne! cut je na v√Ωber stƒ∫pcov.

---

### Q19: SORT - TRIEDENIE

```bash
sort -r file.txt
```

- [ ] A) Triedi vzostupne
- [ ] B) Triedi zostupne
- [ ] C) `-r` = reverse
- [ ] D) Alfabeticky alebo numericky

**Spr√°vna odpoveƒè:** B, C

**Vysvetlenie:** `-r` = reverse = NAOPAK = zostupne!

---

### Q20: PIPE - KOMBINOVANIE

```bash
cat file.txt | grep "pattern" | wc -l
```

- [ ] A) cat ‚Üí grep ‚Üí wc postupne
- [ ] B) Poƒçet riadkov s "pattern"
- [ ] C) V≈°etko sa vykon√° paralelne
- [ ] D) `|` sp√°ja pr√≠kazy

**Spr√°vna odpoveƒè:** A, B, D

**Vysvetlenie:** Pipe sp√°ja pr√≠kazy sekvenƒçne. V√Ωstup jedn√©ho = vstup ƒèal≈°ieho.

---

### Q21: PRESMEROVANIE

```bash
command > file.txt 2>&1
```

- [ ] A) Stdout do file.txt
- [ ] B) Stderr do file.txt
- [ ] C) Obidve do file.txt
- [ ] D) `2>&1` = stderr‚Üístdout

**Spr√°vna odpoveƒè:** C, D

**Vysvetlenie:** `>` = stdout, `2>` = stderr, `2>&1` = presmerova≈• stderr do stdout.

---

### Q22: CHMOD - OPR√ÅVNENIA

```bash
chmod 755 script.sh
```

- [ ] A) rwxr-xr-x
- [ ] B) Vlastn√≠k m√° v≈°etko
- [ ] C) Grupa a ostatn√≠ maj√∫ r-x
- [ ] D) 7=rwx, 5=r-x

**Spr√°vna odpoveƒè:** A, B, C, D

**Vysvetlenie:** V≈°etko je spr√°vne! 755 = klasick√© schv√°len√© opr√°vnenia pre skripty.

---

### Q23: FIND - SIZE

```bash
find . -size +100c
```

- [ ] A) V√§ƒç≈°ie ako 100 bytov
- [ ] B) `+` = plus = viac
- [ ] C) `c` = characters/bytes
- [ ] D) Presne 100 bytov

**Spr√°vna odpoveƒè:** A, B, C

**Vysvetlenie:** `-size +100c` = VIAC ako 100 bytov. `-100c` = MENEJ, `100c` = PRESNE.

---

### Q24: HEAD a TAIL

```bash
head -5 file.txt
tail -5 file.txt
```

- [ ] A) head = prv√Ωch 5 riadkov
- [ ] B) tail = posledn√Ωch 5 riadkov
- [ ] C) Obe s√∫ spr√°vne
- [ ] D) Ani jedna nie je spr√°vna

**Spr√°vna odpoveƒè:** A, B, C

**Vysvetlenie:** head a tail s√∫ ≈°tandardn√© pr√≠kazy s opaƒçn√Ωmi funkciami.

---

### Q25: LESS a MORE

```bash
less file.txt
more file.txt
```

- [ ] A) less je star≈°ie
- [ ] B) more je star≈°ie
- [ ] C) less je pokroƒçilej≈°ie
- [ ] D) less je lep≈°ie

**Spr√°vna odpoveƒè:** B, C, D

**Vysvetlenie:** more = star≈°√≠, less = pokroƒçilej≈°√≠ (ironicky men≈°√≠ = v√§ƒç≈°√≠!)

---

## ƒåAS≈§ C: BASH SCRIPTING (20 ot√°zok)

### Q26: PREMENN√â

```bash
veta="ahoj"
echo $veta
echo "$veta"
echo '$veta'
```

Koƒæko R√îZNYCH v√Ωstupov?

- [ ] A) 1 - v≈°etky rovnak√©
- [ ] B) 2 - r√¥zne
- [ ] C) 3 - v≈°etky r√¥zne
- [ ] D) Chyba

**Spr√°vna odpoveƒè:** B

**Vysvetlenie:** 
- `$veta` = ahoj (rozb√°lenie)
- `"$veta"` = ahoj (rozb√°lenie s √∫vodzovkami)
- `'$veta'` = $veta (liter√°l - bez rozb√°lenia)

---

### Q27: ARITMETIKA - CHYBA

```bash
i=5
i=$i+1
echo $i
```

- [ ] A) 6
- [ ] B) "5+1"
- [ ] C) Chyba
- [ ] D) Niƒç

**Spr√°vna odpoveƒè:** B

**Vysvetlenie:** Bez `$(( ))` je to RE≈§AZCOV√Å oper√°cia! V√Ωsledok = "5+1"

---

### Q28: ARITMETIKA - SPR√ÅVNE

```bash
i=5
i=$((i+1))
echo $i
```

- [ ] A) "5+1"
- [ ] B) 6
- [ ] C) Chyba
- [ ] D) Niƒç

**Spr√°vna odpoveƒè:** B

**Vysvetlenie:** `$(( ))` = aritmetick√© vyhodnotenie!

---

### Q29: POLIA - BEZ √öVODZOVIEK

```bash
zoznam=(a b "c d")
zoznam2=(${zoznam[@]} e)
echo ${#zoznam2[@]}
```

- [ ] A) 3
- [ ] B) 4
- [ ] C) 5
- [ ] D) Chyba

**Spr√°vna odpoveƒè:** C

**Vysvetlenie:** Bez √∫vodzoviek sa `"c d"` ROZPADNE na: a, b, c, d, e = 5 prvkov!

---

### Q30: POLIA - S √öVODZOVKAMI

```bash
zoznam=(a b "c d")
zoznam2=("${zoznam[@]}" e)
echo ${#zoznam2[@]}
```

- [ ] A) 3
- [ ] B) 4
- [ ] C) 5
- [ ] D) Chyba

**Spr√°vna odpoveƒè:** B

**Vysvetlenie:** S √∫vodzovkami `"${zoznam[@]}"` ostane spolu: a, b, "c d", e = 4 prvky!

---

### Q31-Q60: [Pokraƒçovanie v podobnom form√°te...]

---

## V√ùSLEDKY

**Tvoj sk√≥re: _____ / 60 bodov**

| Rozsah | Hodnotenie |
|--------|-----------|
| 54-60 | V√Ωborn√Ω (A) üåü |
| 48-53 | Veƒæmi dobr√Ω (B) |
| 42-47 | Dobr√Ω (C) |
| 36-41 | Postaƒçuj√∫ci (D) |
| <36 | Nedostaƒçuj√∫ci (E) |

---

**Pokraƒçuj na TEST-2 a TEST-3!** üöÄ

**Verzia:** 2.0 ‚úÖ  
**Form√°t:** Flexibiln√Ω (0-N spr√°vn√Ωch odpoved√≠)  
**Posledn√° Aktualiz√°cia:** 30.10.2025